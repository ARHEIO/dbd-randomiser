{"version":3,"sources":["Services/generator/models.ts","Molecules/Footer/Footer.tsx","Molecules/Header/Header.tsx","Organisms/LandingView/LandingView.tsx","config.ts","Services/generator/generateLoadoutApi.ts","Atoms/DiamondIcon/DiamondIcon.tsx","Atoms/SquareIcon/SquareIcon.tsx","Molecules/KillerPanel/KillerPanel.tsx","Atoms/Spinner/Spinner.tsx","Organisms/KillerView/KillerView.tsx","Molecules/SurvivorPanel/SurvivorPanel.tsx","Organisms/SurvivorView/SurvivorView.tsx","Router/Router.tsx","Store/Store.tsx","Organisms/App/App.tsx","serviceWorker.ts","index.tsx"],"names":["IRank","Footer","className","href","target","rel","Header","LandingView","to","alt","src","endpoints","randomiserApi","process","assets","colours","BROWN","YELLOW","GREEN","PURPLE","IRIDESCANT","GOLD","generateKiller","axios","get","config","generateSurvivor","DiamondIcon","props","name","rank","icon","backgroundcolor","style","backgroundColor","SquareIcon","KillerPanel","killer","addons","map","addon","key","perks","perk","Spinner","cx","cy","r","KillerView","useState","killerDetails","setKillerDetails","useEffect","then","response","data","Button","variant","color","onClick","SurvivorPanel","survivor","item","length","SurvivorView","survivorDetails","setSurvivorDetails","Router","basename","path","component","exact","breakpoints","createBreakpoints","getPixelSize","x","theme","createMuiTheme","palette","primary","main","secondary","overrides","MuiButton","root","fontSize","minWidth","minHeight","up","Store","children","ThemeProvider","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a9a36868.chunk.js","sourcesContent":["export enum IRank {\n  BROWN = 1,\n  YELLOW,\n  GREEN,\n  PURPLE,\n  IRIDESCANT,\n  GOLD\n}\n\nexport interface BasicObject {\n  name: string;\n  icon: string;\n  rank: IRank | null;\n}\n\nexport interface UpgradableObject extends BasicObject {\n  addons: BasicObject[];\n}\n\nexport type Killer = UpgradableObject; // doesn't use rank\nexport type Item = UpgradableObject;\nexport type Survivor = BasicObject;\nexport type Addon = BasicObject;\nexport type Perk = BasicObject;\n\nexport interface GeneratedKiller {\n  name: string;\n  icon: string;\n  addons: Addon[];\n  perks: Perk[];\n}\n\nexport interface GeneratedSurvivor {\n  icon: string;\n  item: Item;\n  name: string;\n  perks: Perk[];\n}\n","import React, { ReactElement } from 'react';\nimport './Footer.scss';\n\nconst Footer = (): ReactElement => (\n  <footer className=\"app-footer\">\n    <p>\n      Credit to icons goes to u/thatpikminguy on Reddit. Grab the icon set yourself on\n      <a\n        href=\"https://www.reddit.com/r/PerkByDaylight/comments/fhqoux/the_shitty_ui_pack_13_chains_of_hate_doctor/\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        r/PerkByDaylight\n      </a>\n    </p>\n  </footer>\n);\n\nexport default Footer;\n","import React, { ReactElement } from 'react';\nimport './Header.scss';\n\nconst Header = (): ReactElement => (\n  <header className=\"app-header\">\n    <div className=\"app-header_top-bar\" />\n    <div className=\"app-header_bottom-bar\">\n      <h1>Dead By Daylight Loadout Randomiser</h1>\n    </div>\n  </header>\n);\n\nexport default Header;\n","import React, { ReactElement } from 'react';\nimport './LandingView.scss';\nimport { Link } from 'react-router-dom';\n\nconst LandingView = (): ReactElement => (\n  <div className=\"landing-container\">\n    <Link className=\"link-button\" to=\"/survivor\">\n      <img alt=\"survivor\" src=\"https://dqr3pglopijar.cloudfront.net/assets/iconHelpLoading_survivor.png\" />\n      <p>Randomise survivor build</p>\n    </Link>\n\n    <Link className=\"link-button\" to=\"/killer\">\n      <img alt=\"killer\" src=\"https://dqr3pglopijar.cloudfront.net/assets/iconHelpLoading_killer.png\" />\n      <p>Randomise killer build</p>\n    </Link>\n  </div>\n);\n\nexport default LandingView;\n","import { IRank } from './Services/generator/models';\n\nexport default {\n  endpoints: {\n    randomiserApi: process.env.REACT_APP_RANDOMISER_SERVER_ENDPOINT,\n    assets: process.env.REACT_APP_ASSETS,\n  },\n  colours: {\n    [IRank.BROWN]: '#ab713c',\n    [IRank.YELLOW]: '#e8c252',\n    [IRank.GREEN]: '#199b1e',\n    [IRank.PURPLE]: '#ac3ee3',\n    [IRank.IRIDESCANT]: '#ff0955',\n    [IRank.GOLD]: '#ff8800',\n  },\n};\n","import axios from 'axios';\nimport { GeneratedKiller, GeneratedSurvivor } from './models';\nimport config from '../../config';\n\nexport const generateKiller = (): Promise<{data: GeneratedKiller}> => axios.get(`${config.endpoints.randomiserApi}/loadout?q=killer`);\n\nexport const generateSurvivor = (): Promise<{data: GeneratedSurvivor}> => axios.get(`${config.endpoints.randomiserApi}/loadout?q=survivor`);\n","import React, { ReactElement } from 'react';\nimport './DiamondIcon.scss';\nimport { BasicObject } from '../../Services/generator/models';\nimport config from '../../config';\n\n// TODO: Find a way to have a placeholder spinner component for the image\n\nconst DiamondIcon = (props: BasicObject): ReactElement => {\n  const { name, rank, icon } = props;\n  const backgroundcolor = rank ? config.colours[rank] : '#61513C';\n\n  return (\n    <div className=\"diamond-icon\">\n      <p className=\"diamond-icon_name\">{name}</p>\n      <div className=\"diamond-icon_icon\" style={{ backgroundColor: backgroundcolor }}>\n        <img alt={name} src={`${config.endpoints.assets}/shitty/${icon}`} />\n      </div>\n    </div>\n  );\n};\n\nexport default DiamondIcon;\n","import React, { ReactElement } from 'react';\nimport './SquareIcon.scss';\nimport config from '../../config';\nimport { BasicObject } from '../../Services/generator/models';\n\n// TODO: Find a way to have a placeholder spinner component for the image\n\nconst SquareIcon = (props: BasicObject): ReactElement => {\n  const { name, rank, icon } = props;\n  const backgroundcolor = rank ? config.colours[rank] : '#61513C';\n\n  return (\n    <div className=\"square-icon\">\n      <p className=\"square-icon_name\">{name}</p>\n      <div className=\"square-icon_icon\" style={{ backgroundColor: backgroundcolor }}>\n        <img alt={name} src={`${config.endpoints.assets}/shitty/${icon}`} />\n      </div>\n    </div>\n  );\n};\n\nexport default SquareIcon;\n","import React, { ReactElement } from 'react';\nimport './KillerPanel.scss';\n\nimport DiamondIcon from '../../Atoms/DiamondIcon/DiamondIcon';\nimport SquareIcon from '../../Atoms/SquareIcon/SquareIcon';\n\nimport { Perk as IPerk, GeneratedKiller } from '../../Services/generator/models';\n\nconst KillerPanel = (props: { killer: GeneratedKiller }): ReactElement => {\n  const {\n    killer,\n  } = props;\n  return (\n    <div className=\"killer\">\n      <SquareIcon name={killer.name} icon={killer.icon} rank={null} />\n      {killer.addons.map((addon: any) => (\n        <SquareIcon key={addon.name} name={addon.name} icon={addon.icon} rank={addon.rank} />\n      ))}\n      {killer.perks.map((perk: IPerk) => (\n        <DiamondIcon key={perk.name} name={perk.name} icon={perk.icon} rank={perk.rank} />\n      ))}\n    </div>\n  );\n};\n\nexport default KillerPanel;\n","import React, { ReactElement } from 'react';\nimport './Spinner.scss';\n\nconst Spinner: React.FC = (): ReactElement => (\n  <div className=\"survivor loading-spinner-container\">\n    <div className=\"loading-spinner\">\n      <svg className=\"loading-spinner-rear\"><circle cx=\"50%\" cy=\"50%\" r=\"18px\" /></svg>\n      <svg className=\"loading-spinner-front\"><circle cx=\"50%\" cy=\"50%\" r=\"18px\" /></svg>\n    </div>\n  </div>\n);\n\nexport default Spinner;\n","import React, { useEffect, useState, ReactElement } from 'react';\nimport './KillerView.scss';\nimport { Button } from '@material-ui/core';\nimport { generateKiller } from '../../Services/generator/generateLoadoutApi';\nimport KillerPanel from '../../Molecules/KillerPanel/KillerPanel';\nimport Spinner from '../../Atoms/Spinner/Spinner';\nimport { GeneratedKiller } from '../../Services/generator/models';\n\n\nconst KillerView = (): ReactElement => {\n  const [killerDetails, setKillerDetails] = useState<GeneratedKiller | null>(null);\n\n  const getNewKiller = (): void => {\n    setKillerDetails(null); // set loading state\n    generateKiller().then((response) => setKillerDetails(response.data));\n  };\n\n  useEffect(() => {\n    generateKiller().then((response) => setKillerDetails(response.data));\n  }, []);\n\n  return (\n    <div className=\"killer-container\">\n      <h2>Killer</h2>\n      <div className=\"killer-toolbar\">\n        <Button className=\"btn-generate-killer\" variant=\"contained\" color=\"primary\" onClick={getNewKiller}>Generate New Loadout</Button>\n        <Button variant=\"outlined\" color=\"secondary\" href=\"#/survivor\">To Survivor Loadout</Button>\n      </div>\n      { killerDetails && killerDetails.name\n        ? <KillerPanel killer={killerDetails} />\n        : <Spinner />}\n    </div>\n  );\n};\n\nexport default KillerView;\n","import React, { ReactElement } from 'react';\nimport './SurvivorPanel.scss';\n\nimport DiamondIcon from '../../Atoms/DiamondIcon/DiamondIcon';\nimport SquareIcon from '../../Atoms/SquareIcon/SquareIcon';\n\nimport { Perk as IPerk, GeneratedSurvivor } from '../../Services/generator/models';\n\nconst SurvivorPanel = (props: {survivor: GeneratedSurvivor}): ReactElement => {\n  const { survivor } = props;\n  return (\n    <div className=\"survivor\">\n      <SquareIcon name={survivor.name} icon={survivor.icon} rank={null} />\n      <SquareIcon name={survivor.item.name} icon={survivor.item.icon} rank={survivor.item.rank} />\n      {survivor.item.addons.length > 0\n        ? survivor.item.addons.map((addon: any) => (\n          <SquareIcon key={addon.name} name={addon.name} icon={addon.icon} rank={addon.rank} />\n        ))\n        : <div className=\"firecracker-buffer\" />}\n      {survivor.perks.map((perk: IPerk) => (\n        <DiamondIcon key={perk.name} name={perk.name} icon={perk.icon} rank={perk.rank} />\n      ))}\n    </div>\n  );\n};\nexport default SurvivorPanel;\n","import React, { useState, useEffect, ReactElement } from 'react';\nimport './SurvivorView.scss';\nimport { Button } from '@material-ui/core';\nimport { generateSurvivor } from '../../Services/generator/generateLoadoutApi';\nimport SurvivorPanel from '../../Molecules/SurvivorPanel/SurvivorPanel';\nimport Spinner from '../../Atoms/Spinner/Spinner';\nimport { GeneratedSurvivor } from '../../Services/generator/models';\n\nconst SurvivorView = (): ReactElement => {\n  const [survivorDetails, setSurvivorDetails] = useState<GeneratedSurvivor | null>(null);\n\n  const getNewSurvivor = (): void => {\n    setSurvivorDetails(null); // set loading state\n    generateSurvivor().then((response) => setSurvivorDetails(response.data));\n  };\n\n  useEffect(() => {\n    generateSurvivor().then((response) => setSurvivorDetails(response.data));\n  }, []);\n\n  return (\n    <div className=\"survivor-container\">\n      <h2>Survivor</h2>\n      <div className=\"survivor-toolbar\">\n        <Button className=\"btn-generate-survivor\" variant=\"contained\" color=\"primary\" onClick={getNewSurvivor}>Generate New Loadout</Button>\n        <Button variant=\"outlined\" color=\"secondary\" href=\"#/killer\">To Killer Loadout</Button>\n      </div>\n      {survivorDetails && survivorDetails.item\n        ? <SurvivorPanel survivor={survivorDetails} />\n        : <Spinner />}\n    </div>\n  );\n};\n\nexport default SurvivorView;\n","import React, { ReactElement } from 'react';\nimport {\n  Switch,\n  Route,\n  HashRouter,\n} from 'react-router-dom';\n\n\nimport LandingView from '../Organisms/LandingView/LandingView';\nimport KillerView from '../Organisms/KillerView/KillerView';\nimport SurvivorView from '../Organisms/SurvivorView/SurvivorView';\n\nconst Router = (): ReactElement => (\n  <HashRouter basename=\"/\">\n    <Switch>\n      <Route path=\"/killer\" component={KillerView} />\n      <Route path=\"/survivor\" component={SurvivorView} />\n      <Route path=\"/*\" exact component={LandingView} />\n    </Switch>\n  </HashRouter>\n);\n\n\nexport default Router;\n","import React, { ReactElement } from 'react';\nimport { ThemeProvider, createMuiTheme, Theme } from '@material-ui/core/styles';\n\nimport createBreakpoints from '@material-ui/core/styles/createBreakpoints';\n\n/**\n * xs, extra-small: 0px\n * sm, small: 600px\n * md, medium: 960px\n * lg, large: 1280px\n * xl, extra-large: 1920px\n */\nconst breakpoints = createBreakpoints({});\n\nconst getPixelSize = (x: number): string => `${x * 8}px`;\n\nconst theme: Theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#FF2A2B',\n    },\n    secondary: {\n      main: '#ffffff',\n    },\n  },\n  overrides: {\n    MuiButton: {\n      root: {\n        fontSize: '14px',\n        minWidth: '100%',\n        minHeight: getPixelSize(6),\n        [breakpoints.up('md')]: {\n          minWidth: getPixelSize(25),\n        },\n      },\n    },\n  },\n});\n\nconst Store = (props: {children: any}): ReactElement => {\n  const { children } = props;\n\n  return (\n    <>\n      <ThemeProvider theme={theme}>\n        {children}\n      </ThemeProvider>\n    </>\n  );\n};\n\nexport default Store;\n","import React, { ReactElement } from 'react';\nimport './App.scss';\n\nimport Footer from '../../Molecules/Footer/Footer';\nimport Header from '../../Molecules/Header/Header';\nimport Router from '../../Router/Router';\nimport Store from '../../Store/Store';\n\nconst App = (): ReactElement => (\n  <div className=\"app-container\">\n    <Store>\n      <Header />\n      <section className=\"app\">\n        <Router />\n      </section>\n      <Footer />\n    </Store>\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    // TODO: https://github.com/facebook/create-react-app/issues/8863\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL!,\n      window.location.href,\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './Organisms/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}